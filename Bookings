--1 Выведите названия самолётов, которые имеют менее 50 посадочных мест.

SELECT a.model
FROM aircrafts a
INNER JOIN seats s
ON a.aircraft_code = s.aircraft_code
GROUP BY a.model
HAVING COUNT(*) < 50;

--2 Выведите процентное изменение ежемесячной суммы бронирования билетов, округленной до сотых. - ????????? процент ноль???

SELECT ROUND((SUM(total_amount) - (SELECT SUM(total_amount) 
FROM bookings b 
WHERE EXTRACT(month FROM date_trunc('month', CURRENT_DATE) - INTERVAL '1' MONTH) 
= EXTRACT(month FROM b.book_date))) / (SELECT SUM(total_amount) 
FROM bookings b 
WHERE EXTRACT(month FROM date_trunc('month', CURRENT_DATE) - INTERVAL '1' MONTH) 
= EXTRACT(month FROM b.book_date)) * 100, 2)
AS percentage_change
FROM bookings b 
WHERE EXTRACT(month FROM CURRENT_DATE) = EXTRACT(month FROM b.book_date);

-- 3 Выведите названия самолётов без бизнес-класса. Используйте в решении функцию array_agg.

SELECT array_agg(DISTINCT a.model)
FROM aircrafts a
INNER JOIN seats s
ON a.aircraft_code = s.aircraft_code
WHERE s.fare_conditions <> 'business';

--4. Выведите накопительный итог количества мест в самолётах по каждому аэропорту на каждый день. Учтите только те самолеты, которые летали пустыми и только те дни, когда из одного аэропорта вылетело более одного такого самолёта. Выведите в результат код аэропорта, дату вылета, количество пустых мест и накопительный итог.

WITH empty_flights AS (
SELECT f.flight_id, f.departure_airport, f.scheduled_departure::date AS flight_date, 
COUNT(s.seat_no) AS empty_seats
FROM flights f
LEFT JOIN ticket_flights tf ON f.flight_id = tf.flight_id
LEFT JOIN seats s ON f.aircraft_code = s.aircraft_code AND s.fare_conditions = tf.fare_conditions
LEFT JOIN tickets t ON tf.ticket_no = t.ticket_no AND t.passenger_id IS NULL
GROUP BY f.flight_id, f.departure_airport, f.scheduled_departure::date
HAVING COUNT(*) > 1
), cumulative_total AS (
SELECT departure_airport, flight_date, empty_seats,
SUM(empty_seats) OVER (PARTITION BY departure_airport, flight_date ORDER BY flight_date) AS total_empty_seats
FROM empty_flights
)
SELECT departure_airport, flight_date, empty_seats, total_empty_seats
FROM cumulative_total;



--5. Найдите процентное соотношение перелётов по маршрутам от общего количества перелётов. 
-- Выведите в результат названия аэропортов и процентное отношение. 
-- Используйте в решении оконную функцию.

SELECT departure_airport, arrival_airport, 
COUNT(*) / SUM(COUNT(*)) OVER() * 100 AS percentage
FROM flights
GROUP BY departure_airport, arrival_airport;

-- 6. Выведите количество пассажиров по каждому коду сотового оператора. Код оператора – это три символа после +7. - ????? пустой ответ

SELECT SUBSTRING(jsonb_extract_path_text(contact_data, 'key'), 3, 3) AS operator_code,
COUNT(DISTINCT passenger_id) AS passenger_count
FROM tickets
WHERE jsonb_extract_path_text(contact_data, 'key') LIKE '+7%'
GROUP BY operator_code;


--7. Классифицируйте финансовые обороты (сумму стоимости билетов) по маршрутам: - ????? пустой оответ
   • до 50 млн – low
   • от 50 млн включительно до 150 млн – middle
   • от 150 млн включительно – high
  Выведите в результат количество маршрутов в каждом полученном классе.

SELECT 
CASE 
WHEN total_amount < 50000000 THEN 'low'
WHEN total_amount >= 50000000 AND total_amount < 150000000 THEN 'middle'
ELSE 'high'
END AS financial_class,
COUNT(DISTINCT CONCAT(f.departure_airport, '-', f.arrival_airport)) AS route_count
FROM flights f
JOIN ticket_flights tf ON f.flight_id = tf.flight_id
JOIN bookings b ON tf.ticket_no = b.book_ref
GROUP BY financial_class;



--8. Вычислите медиану стоимости билетов, медиану стоимости бронирования и отношение медианы бронирования к медиане стоимости билетов, результат округлите до сотых.

WITH ticket_median AS (
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY total_amount) AS median_ticket
FROM bookings
), booking_median AS (
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY total_amount) AS median_booking
FROM bookings
)
SELECT ROUND(median_ticket::numeric, 2) AS ticket_median,
       ROUND(median_booking::numeric, 2) AS booking_median,
       ROUND(median_booking::numeric / median_ticket::numeric, 2) AS booking_ticket_ratio
FROM ticket_median, booking_median;


--9. Найдите значение минимальной стоимости одного километра полёта для пассажира. Для этого определите расстояние между аэропортами и учтите стоимость билетов.

